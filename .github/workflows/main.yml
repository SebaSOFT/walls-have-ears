name: Release Creation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get module version
        id: get_version
        run: echo "version=$(jq -r .version module.json)" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Cache Yarn dependencies
        uses: actions/cache@v4
        with:
          path: .yarn/cache
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --immutable --inline-builds

      - name: Build project
        run: yarn build

      - name: Run ESLint
        run: yarn lint

      - name: Run tests
        run: yarn test

      # Substitute the Manifest and Download URLs in the module.json
      - name: Substitute Manifest and Download Links For Versioned Ones
        id: sub_manifest_link_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{ steps.get_version.outputs.version }}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{ steps.get_version.outputs.version }}/module.zip

      # - run: mkdir -p scripts && mv dist/* scripts/

      # Create a zip file with all files required by the module to add to the release
      - run: zip -r ./module.zip module.json LICENSE dist/ lang/

      #  - run: rm -rf scripts

      # Create a release for this specific version
      - name: Create Release
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          generateReleaseNotes: true # Automatically generate release notes
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ steps.get_version.outputs.version }}

      - name: Publish to Foundry Hub
        run: npx @ghost-fvtt/foundry-publish
        env:
          FVTT_TOKEN: ${{ secrets.FVTT_TOKEN }}
          FVTT_MANIFEST_URL: ./module.json
